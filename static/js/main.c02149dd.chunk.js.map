{"version":3,"sources":["components/Header.jsx","apis/Shazam.js","apis/Genius.js","components/SongList.jsx","hooks/useSearch.js","hooks/useAutoComplete.js","components/SearchBar.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","headers","useQueryString","SongList","search","useState","results","setResults","finished","setFinished","useEffect","axios","method","url","geniusHeaders","params","q","then","response","data","hits","useSearchGenius","tooltip","setTooltip","tooltipStyle","display","background","borderRadius","cursor","padding","zIndex","height","width","radius","margin","color","map","res","track","result","key","id","onMouseOver","onMouseOut","primary_artist","target","rel","src","header_image_url","alt","title","full_title","MouseTooltip","visible","style","offsetY","useAutoComplete","value","query","locale","term","shazamHeaders","hints","catch","err","console","log","SearchBar","songSearch","setSongSearch","songSearched","setSongSearched","displaySuggestions","setDisplaySuggestions","suggestionsRef","useRef","suggestions","setSuggestions","document","addEventListener","handleClickOutsideSuggestions","removeEventListener","e","list","current","contains","autoComplete","onSubmit","preventDefault","type","name","placeholder","onFocus","onChange","ref","index","onClick","textContent","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c02149dd.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"container\">\r\n      <div className=\"title\">\r\n        <h1>Melo D</h1>\r\n        <p>Shazam/Genius Search API</p>\r\n      </div>\r\n      <div className=\"credentials\">\r\n        <h5>\r\n          by <a href=\"https://github.com/dsijakovski98\">Даниел Шијаковски</a>\r\n        </h5>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","const headers = {\r\n  \"x-rapidapi-host\": \"shazam.p.rapidapi.com\",\r\n  \"x-rapidapi-key\": \"f18c0d9b6emsh00da8fe2afa4fb2p14ba5ajsn903cb12bc77d\",\r\n  useQueryString: true,\r\n};\r\n\r\nconst autoCompleteLink = \"https://shazam.p.rapidapi.com/auto-complete\";\r\nconst searchLink = \"https://shazam.p.rapidapi.com/search\";\r\n\r\nexport { headers, autoCompleteLink, searchLink };\r\n","const headers = {\r\n  \"x-rapidapi-host\": \"genius.p.rapidapi.com\",\r\n  \"x-rapidapi-key\": \"f18c0d9b6emsh00da8fe2afa4fb2p14ba5ajsn903cb12bc77d\",\r\n};\r\n\r\nconst searchLink = \"https://genius.p.rapidapi.com/search\";\r\n\r\nexport { headers, searchLink };\r\n","import React, { useState } from \"react\";\r\nimport { ScaleLoader } from \"react-spinners\";\r\nimport MouseTooltip from \"react-sticky-mouse-tooltip\";\r\nimport { useSearchGenius } from \"../hooks/useSearch\";\r\n\r\nfunction SongList({ search }) {\r\n  const [finished, results] = useSearchGenius(search);\r\n  const [tooltip, setTooltip] = useState(false);\r\n\r\n  const tooltipStyle = {\r\n    display: tooltip ? \"block\" : \"none\",\r\n    background: \"white\",\r\n    borderRadius: \"5px\",\r\n    cursor: \"pointer\",\r\n    padding: \"0.5em\",\r\n    zIndex: \"3\",\r\n  };\r\n\r\n  return (\r\n    <div className=\"songs-list\">\r\n      {!finished ? (\r\n        <ScaleLoader\r\n          height=\"50px\"\r\n          width=\"6px\"\r\n          radius=\"6px\"\r\n          margin=\"3px\"\r\n          color=\"royalblue\"\r\n        />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {results\r\n        ? results.map((res) => {\r\n            const track = res.result;\r\n            // console.log(track);\r\n            return (\r\n              <div className=\"song-card\" key={track.id}>\r\n                <div className=\"song-img\">\r\n                  <a\r\n                    onMouseOver={() => setTooltip(true)}\r\n                    onMouseOut={() => setTooltip(false)}\r\n                    href={track.primary_artist.url}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                  >\r\n                    <img src={track.header_image_url} alt=\"\" />\r\n                  </a>\r\n                </div>\r\n                <div className=\"song-info\">\r\n                  <div className=\"song-info-text\">\r\n                    <h2>{track.title}</h2>\r\n                    <p>{track.full_title}</p>\r\n                  </div>\r\n                  <div className=\"get-info-btn\">\r\n                    <a\r\n                      href={track.url}\r\n                      target=\"_blank\"\r\n                      rel=\"noopener noreferrer\"\r\n                    >\r\n                      <button>Lyrics</button>\r\n                    </a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })\r\n        : \"\"}\r\n      <MouseTooltip visible={tooltip} style={tooltipStyle} offsetY={10}>\r\n        <span>Artist info</span>\r\n      </MouseTooltip>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SongList;\r\n","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n  headers as shazamHeaders,\r\n  searchLink as shazamSearchLink,\r\n} from \"../apis/Shazam\";\r\nimport {\r\n  headers as geniusHeaders,\r\n  searchLink as geniusSearchLink,\r\n} from \"../apis/Genius\";\r\n\r\nconst useSearchShazam = (search) => {\r\n  const [results, setResults] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const query = {\r\n      locale: \"en-US\",\r\n      offset: \"0\",\r\n      limit: 5,\r\n      term: search,\r\n    };\r\n\r\n    axios({\r\n      method: \"GET\",\r\n      url: shazamSearchLink,\r\n      headers: shazamHeaders,\r\n      params: query,\r\n    }).then((response) => {\r\n      if (response.data) {\r\n        setResults(response.data.tracks.hits);\r\n      }\r\n    });\r\n  }, [search]);\r\n\r\n  return results;\r\n};\r\n\r\nconst useSearchGenius = (search) => {\r\n  const [results, setResults] = useState([]);\r\n  const [finished, setFinished] = useState(false);\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"GET\",\r\n      url: geniusSearchLink,\r\n      headers: geniusHeaders,\r\n      params: {\r\n        q: search,\r\n      },\r\n    }).then((response) => {\r\n      if (response.data) {\r\n        setResults(response.data.response.hits);\r\n        setFinished(true);\r\n      }\r\n    });\r\n  }, [search]);\r\n  return [finished, results];\r\n};\r\n\r\nexport { useSearchShazam, useSearchGenius };\r\n","import axios from \"axios\";\r\nimport { headers as shazamHeaders, autoCompleteLink } from \"../apis/Shazam\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst useAutoComplete = (value) => {\r\n  const [results, setResults] = useState();\r\n\r\n  useEffect(() => {\r\n    const query = {\r\n      locale: \"en-US\",\r\n      term: value,\r\n    };\r\n\r\n    if (value === \"\") {\r\n      setResults([]);\r\n      return;\r\n    }\r\n\r\n    axios({\r\n      method: \"GET\",\r\n      url: autoCompleteLink,\r\n      headers: shazamHeaders,\r\n      params: query,\r\n    })\r\n      .then((response) => {\r\n        if (response && response.data) {\r\n          setResults(response.data.hints);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, [value]);\r\n\r\n  return [results, setResults];\r\n};\r\n\r\nexport default useAutoComplete;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport SongList from \"./SongList\";\r\n\r\nimport useAutoComplete from \"../hooks/useAutoComplete\";\r\n\r\nfunction SearchBar() {\r\n  const [songSearch, setSongSearch] = useState(\"\");\r\n  const [songSearched, setSongSearched] = useState(\"\");\r\n  const [displaySuggestions, setDisplaySuggestions] = useState(false);\r\n\r\n  const suggestionsRef = useRef(null);\r\n\r\n  const [suggestions, setSuggestions] = useAutoComplete(songSearch);\r\n\r\n  const formSubmit = (e) => {\r\n    e.preventDefault();\r\n    setSongSearched(songSearch);\r\n    setDisplaySuggestions(false);\r\n  };\r\n\r\n  // HIDE SUGGESTIONS LIST ON OUTSIDE CLICK ***************************************\r\n  useEffect(() => {\r\n    document.addEventListener(\"mousedown\", handleClickOutsideSuggestions);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutsideSuggestions);\r\n    };\r\n  }, []);\r\n\r\n  const handleClickOutsideSuggestions = (e) => {\r\n    const { current: list } = suggestionsRef;\r\n    if (list && !list.contains(e.target)) {\r\n      setDisplaySuggestions(false);\r\n    }\r\n  };\r\n  // HIDE SUGGESTIONS LIST ON OUTSIDE CLICK ***************************************\r\n\r\n  return (\r\n    <div className=\"search-bar-container\">\r\n      <form\r\n        autoComplete=\"off\"\r\n        className=\"search-bar-form\"\r\n        onSubmit={formSubmit}\r\n      >\r\n        <div className=\"suggestions-wrapper\">\r\n          <label className=\"search-label\">Search</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"search\"\r\n            className=\"search-bar-input\"\r\n            placeholder=\"Artist name\"\r\n            value={songSearch}\r\n            onFocus={() => {\r\n              setDisplaySuggestions(true);\r\n            }}\r\n            onChange={(e) => {\r\n              setDisplaySuggestions(true);\r\n              setSongSearch(e.target.value);\r\n            }}\r\n          />\r\n          {displaySuggestions && (\r\n            <div ref={suggestionsRef} className=\"suggestions-list\">\r\n              {suggestions\r\n                ? suggestions.map((result, index) => (\r\n                    <li\r\n                      className=\"suggestion\"\r\n                      key={index}\r\n                      onClick={(e) => {\r\n                        setSongSearch(e.target.textContent);\r\n                        setSuggestions([]);\r\n                      }}\r\n                    >\r\n                      {result.term}\r\n                    </li>\r\n                  ))\r\n                : \"\"}\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"btn-wrap\">\r\n          <button type=\"submit\" className=\"search-bar-submit-btn\">\r\n            Search\r\n          </button>\r\n        </div>\r\n      </form>\r\n      {songSearched && <SongList search={songSearched} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport SearchBar from \"./components/SearchBar\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <SearchBar />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}